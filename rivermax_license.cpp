#include <string>
#include <time.h>
#if defined(__linux__)
#include <unistd.h>
#endif
#include "rsa_license.h"
#include "rivermax_license_tool.h"
#include "logger/logger_wrapper.h"

namespace rivermax {

static int rsa_extract_version(char **buf, size_t *len,
        struct rsa_license_data *data)
{
    if (*len < sizeof(u64))
        return -1;

    data->version = **((u64**)buf);

    *buf += sizeof(u64);
    *len -= sizeof(u64);
    return 0;
}

static int rsa_extract_vendor_name(char **buf, size_t *len,
        struct rsa_license_data *data)
{
    int i;

    if (*len < VENDOR_NAME_MAX_LENGTH)
        return -1;

    for (i = 0; i < VENDOR_NAME_MAX_LENGTH; i++)
        data->vendor_name[i] = (*buf)[i];

    *buf += VENDOR_NAME_MAX_LENGTH;
    *len -= VENDOR_NAME_MAX_LENGTH;
    return 0;
}

static int rsa_extract_time_limit(char **buf, size_t *len,
        struct rsa_license_data *data)
{
    if (*len < sizeof(time_t))
        return -1;

    data->time_limit = **(time_t**)buf;

    *buf += sizeof(time_t);
    *len -= sizeof(time_t);
    return 0;
}

static int rsa_license_extract_parse_v1(char **buf, size_t *len,
        struct rsa_license_data *data)
{
    if (rsa_extract_vendor_name(buf, len, data)) {
        rivermax_error("Could not extract vendor name");
        return -1;
    }

    if (rsa_extract_time_limit(buf, len, data)) {
        rivermax_error("Could not extract time limit");
        return -1;
    }

    return 0;
}

static int rsa_license_extract_rivermax(char *buf, size_t len, void *data)
{
    struct rsa_license_data *lic_data = (struct rsa_license_data*)data;
    int ret;

    if (rsa_extract_version(&buf, &len, lic_data)) {
        rivermax_error("Could not extract license format version");
        return -1;
    }

    switch (lic_data->version)
    {
    case 1:
        ret = rsa_license_extract_parse_v1(&buf, &len, lic_data);
        break;
    default:
        if (!lic_data->version) {
            rivermax_error("Error: No license version");
        } if (FILE_FORMAT_VERSION < lic_data->version) {
            rivermax_error("Error: license tool supports license format "
                "versions up to {}", FILE_FORMAT_VERSION);
            rivermax_error("       version of license provided: {}",
                lic_data->version);
        } else {
            rivermax_error("Error: unknown license version error");
        }

        ret = -1;
        break;
    }

    return ret;
}

static int license_validate_v1(struct rsa_license_data *lic_data)
{
    int ret = 0;

    if (!lic_data->time_limit) { /* unlimited */
        rivermax_info("Licensed to: {}", lic_data->vendor_name);
    } else {
        int seconds_in_day = 60*60*24;
        time_t now = ROUND_UP(time(NULL), seconds_in_day);

        if (now < lic_data->time_limit) {
            int days_left = (int)(lic_data->time_limit - now) /
                seconds_in_day;

            rivermax_info("Licensed to: {}, evaluation period "
                "expires in {} day{}", lic_data->vendor_name,
                days_left, 1 < days_left ? "s" : "");
        } else if (now == lic_data->time_limit) {
            rivermax_info("Licensed to: {}, evaluation period "
                "expires today", lic_data->vendor_name);
        } else {
            rivermax_info("Licensed to: {}, evaluation period "
                "has expired", lic_data->vendor_name);
            ret = -1;
        }
    }

    return ret;
}

static int license_validate(struct rsa_license_data *lic_data)
{
    int ret;

    switch (lic_data->version) {
    case (1):
        ret = license_validate_v1(lic_data);
        break;
    default:
        /* should not get here */
        ret = -1;
        break;
    }

    return ret;
}

int license_extract(std::string &key_path, std::string &license)
{
    static unsigned char key_default[] = {
        0x49, 0x41, 0x53, 0x52, 0x53, 0x41, 0x51, 0xe0,
        0xcd, 0x77, 0xd2, 0xcf, 0xc3, 0x25, 0x30, 0x0d,
        0x9b, 0x7f, 0xf9, 0x01, 0x10, 0x1f, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x00, 0x00, 0x7d, 0xac, 0xe4, 0x0a, 0x38, 0x3f,
        0x9d, 0x54, 0x2a, 0xc2, 0x1a, 0xa4, 0xc0, 0x51,
        0xef, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xad, 0xc7,
        0x3e, 0x44, 0x5f, 0xdb, 0x6f, 0x45, 0x0b, 0x65,
        0xcb, 0xd6, 0x01, 0x42, 0x70, 0x20, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
        0x00, 0x00, 0xbc, 0x25, 0x93, 0xd7, 0xea, 0x3a,
        0xa0, 0xa3, 0xb2, 0xae, 0xfa, 0xa5, 0x96, 0x7e,
        0x87, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x39,
        0x5c, 0x65, 0x1e, 0x0b, 0xb6, 0xd5, 0x30, 0x8c,
        0xa6, 0x96, 0xb7, 0x6e, 0xc9, 0x0b, 0x3f, 0x80,
        0x5d, 0x76, 0x93, 0xe2, 0xb9, 0xff, 0xea, 0x68,
        0x6c, 0xf8, 0xe3, 0xf4, 0x75, 0x03, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
        0x00, 0x00, 0x9f, 0x52, 0x26, 0x6d, 0x1a, 0xee,
        0xe1, 0xb3, 0x0f, 0x9d, 0xeb, 0xdf, 0x64, 0xed,
        0xa3, 0x53, 0x49, 0x7e, 0xb1, 0x24, 0x0b, 0x21,
        0xc9, 0x7e, 0x30, 0x27, 0xf2, 0x72, 0xf3, 0x0f,
        0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x86, 0x91,
        0x67, 0xb3, 0x48, 0xe1, 0x93, 0xd6, 0x59, 0x16,
        0xe0, 0x43, 0xa4, 0x6c, 0xb0, 0x79, 0x49, 0x2d,
        0xd0, 0x52, 0xce, 0x5a, 0x1c, 0x75, 0x77, 0xd4,
        0xb4, 0x2e, 0xe7, 0xaf, 0x8a, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
        0x00, 0x00, 0x09, 0xc8, 0xaf, 0x2e, 0x44, 0x27,
        0x2e, 0x55, 0x93, 0x3c, 0x8b, 0xf1, 0x6d, 0x17,
        0x33, 0xbc, 0xca, 0x70, 0x86, 0xa1, 0x23, 0x01,
        0xae, 0xae, 0x85, 0xf9, 0xd9, 0xba, 0x09, 0x36,
        0x81, 0xec, 0xbe, 0x99, 0x68, 0x09, 0x45, 0xdd,
        0xfa, 0xfc, 0x85, 0xf7, 0x11, 0x14, 0xdb, 0x38,
        0xe2, 0x6a, 0x71, 0xc6, 0x2f, 0x7d, 0xb5, 0x41,
        0x53, 0x6a, 0x7c, 0xad, 0x83, 0x25, 0x40, 0x16,
        0x0d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0b, 0xe7,
        0xf7, 0x11, 0xc3, 0xcd, 0x95, 0x62, 0x2a, 0x78,
        0x3e, 0x32, 0xf5, 0xb5, 0xbd, 0x1a, 0x60, 0x85,
        0x1e, 0x77, 0x96, 0x1d, 0xfa, 0x4f, 0x5f, 0x76,
        0xd5, 0x32, 0x50, 0x28, 0x4e, 0xe5, 0x75, 0x94,
        0x88, 0x51, 0xa4, 0x45, 0xb6, 0xb6, 0xde, 0xfb,
        0xb7, 0xce, 0x32, 0xe5, 0xd9, 0xf7, 0x3b, 0x5c,
        0x69, 0x08, 0xb2, 0xe9, 0x68, 0xe9, 0x88, 0x34,
        0xc2, 0x0b, 0x0c, 0x14, 0x81, 0x09, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00,
        0x00, 0x00, 0xd5, 0x52, 0x47, 0xfd, 0x22, 0xb8,
        0x3a, 0x62, 0xee, 0xa6, 0x99, 0xda, 0xc5, 0x9d,
        0xa9, 0x7e, 0x1d, 0x5f, 0x99, 0xe4, 0xed, 0x62,
        0x83, 0xac, 0xd7, 0x32, 0x67, 0x0c, 0xf4, 0x60,
        0xbb, 0xb6, 0x30, 0x09, 0x99, 0x08, 0x30, 0x46,
        0xe3, 0xd3, 0x47, 0x16, 0x2e, 0x8a, 0x40, 0xdc,
        0xcc, 0x2b, 0xba, 0x74, 0x67, 0x1c, 0xd6, 0x8c,
        0x2e, 0x1a, 0x2c, 0xe2, 0xe8, 0xcc, 0xd3, 0x81,
        0x88, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x93, 0xf7,
        0x85, 0x79, 0x3b, 0xdd, 0x0e, 0x8e, 0x7a, 0x0a,
        0x78, 0x26, 0x6b, 0x63, 0x8f, 0xfc, 0xda, 0xae,
        0x07, 0xe7, 0xd2, 0xbb, 0x3c, 0x0c, 0x13, 0x78,
        0x89, 0x49, 0x85, 0xad, 0x88, 0x30, 0xa6, 0xb7,
        0x60, 0x35, 0x51, 0xfc, 0xbd, 0xa3, 0xbb, 0x06,
        0xc3, 0x17, 0xd4, 0x65, 0xa6, 0x99, 0xf8, 0xef,
        0x31, 0x39, 0x85, 0x53, 0x2a, 0x40, 0x08, 0xdc,
        0xe0, 0xf0, 0x6c, 0xa8, 0x12, 0x31, 0xcf, 0x99,
        0x5e, 0xd2, 0x96, 0x06, 0x68, 0x3a, 0x6a, 0x67,
        0x2e, 0xbd, 0x13, 0x01, 0x0f, 0x4f, 0x8d, 0x54,
        0xfb, 0x10, 0x60, 0x4e, 0xd0, 0x37, 0x16, 0x41,
        0x18, 0x68, 0x31, 0x42, 0xab, 0x74, 0x0a, 0x13,
        0x77, 0x26, 0x55, 0x9f, 0xb8, 0x9b, 0x62, 0x01,
        0x09, 0xc1, 0x7f, 0x19, 0x91, 0xac, 0x8d, 0xd1,
        0x2a, 0xe5, 0x89, 0xbb, 0xb0, 0x79, 0x5c, 0x06,
        0xbe, 0x67, 0xbe, 0x1a, 0x02, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
        0x00, 0x00, 0xa5, 0xb9, 0x74, 0x42, 0xaa, 0x80,
        0x80, 0xce, 0x6d, 0x10, 0x51, 0x97, 0x09, 0x20,
        0x5b, 0x43, 0x11, 0x34, 0xca, 0xad, 0x82, 0x60,
        0xfd, 0x1e, 0x9b, 0x87, 0xed, 0xf6, 0x5a, 0x47,
        0xf7, 0x80, 0xe2, 0xb9, 0x5a, 0xa9, 0x49, 0xf5,
        0x5e, 0x94, 0xad, 0x2b, 0x1f, 0x80, 0xa9, 0xf9,
        0x0e, 0xab, 0xf7, 0x49, 0x8f, 0x25, 0x45, 0xbd,
        0xa1, 0x64, 0x37, 0xac, 0x06, 0x8d, 0xc5, 0x0f,
        0xee, 0x6c, 0x8c, 0x1f, 0x34, 0x75, 0x28, 0x12,
        0x74, 0xfb, 0x0d, 0x84, 0x3f, 0x0d, 0xff, 0x2e,
        0xb8, 0x08, 0x1b, 0x61, 0x0c, 0x4c, 0xb8, 0xe5,
        0x13, 0x48, 0x35, 0xf5, 0x31, 0x74, 0x33, 0x74,
        0xf8, 0x1f, 0x00, 0x39, 0x31, 0xe1, 0xe7, 0x78,
        0x70, 0x9d, 0x15, 0xe3, 0x2b, 0xe4, 0x70, 0xd4,
        0x25, 0xeb, 0xe9, 0x89, 0xb7, 0xba, 0x43, 0x36,
        0x33, 0x98, 0x48, 0x43, 0x0f, 0x7d, 0x6f, 0x0a,
        0x9b, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0xc3, 0x08,
        0x43, 0x18, 0x99, 0x3d, 0x53, 0x7b, 0x3b, 0x34,
        0xc4, 0x0d, 0x20, 0x8f, 0x7e, 0xe4, 0xeb, 0x52,
        0xbc, 0x02, 0x2c, 0x3b, 0x70, 0x8d, 0x41, 0x5c,
        0xab, 0x46, 0x95, 0xd1, 0xfb, 0xdc, 0xcf, 0x16,
        0x4a, 0x42, 0xde, 0x4f, 0x48, 0xa7, 0x6f, 0xdf,
        0x99, 0xe9, 0xa3, 0x3d, 0xb0, 0xc6, 0x82, 0x8a,
        0x75, 0xbf, 0xe8, 0x11, 0x90, 0xe9, 0x6d, 0x8d,
        0xf4, 0xb8, 0x23, 0x90, 0x38, 0x79, 0xab, 0xc3,
        0x56, 0xd3, 0x5b, 0x1a, 0xbb, 0xeb, 0x3a, 0x46,
        0x2f, 0x41, 0x2e, 0xe5, 0x44, 0x3c, 0xdf, 0x34,
        0xf4, 0xcc, 0x77, 0x81, 0xb0, 0x12, 0x78, 0xe2,
        0xdc, 0xd2, 0xdd, 0xa0, 0xb7, 0xa1, 0x5f, 0xbb,
        0x87, 0x19, 0x1b, 0x00, 0xae, 0x27, 0xfa, 0xa4,
        0x06, 0x02, 0xf3, 0xe2, 0xde, 0x3a, 0x01, 0xd1,
        0x74, 0x64, 0x6d, 0xb9, 0x08, 0xde, 0x53, 0xf3,
        0xe7, 0x8a, 0xf5, 0xe1, 0xfa, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00,
        0x00, 0x00,
    };
    struct rsa_license_ops licnese_ops = {
        NULL,
        NULL,
        rsa_license_extract_rivermax,
    };
    struct rsa_stream_init init;
    struct rsa_license_data license_data;
    int ret;

    rsa_license_init();

    if (key_path.length()) { /* license provided by caller */
        init.type = RSA_STREAM_TYPE_FILE;
        init.params.file.path = const_cast<char*>(key_path.c_str());
        init.params.file.mode = const_cast<char*>("rb");
    } else { /* use default license */
        init.type = RSA_STREAM_TYPE_MEMORY;
        init.params.memory.buf = key_default;
        init.params.memory.len = ARRAY_SZ(key_default);
    }

    ret = rsa_license_extract(&init, (char*)license.c_str(), &licnese_ops,
        &license_data);
    if (ret) {
        rivermax_error("Cannot extract Rivermax license information");
        return -1;
    }

    return license_validate(&license_data);
}

}

